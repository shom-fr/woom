[project]
name = "woom"
description = "Workflow manager for ocean models"
authors = [
  {name = "Stephane Raynaud", email = "stephane.raynaud@shom.fr"},
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Scientific/Engineering",
  "Topic :: System :: Distributed Computing",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Scientific/Engineering :: Atmospheric Science",
  "Topic :: Scientific/Engineering :: Oceanography",
]
dynamic = ["version"]
license = "Apache-2.0"
license-files = ["LICENSE"]
readme = "README.rst"
requires-python = ">=3.9"
dependencies = [
  "colorlog",
  "configobj",
  "jinja2",
  "pandas",
  "platformdirs",
  "psutil",
  "tabulate",
]

[project.optional-dependencies]
dev = [
  "pytest",
  "pytest-mock",
  "pytest-xdist",
  "black",
  "flake8",
  "isort",
  "pylint",
  "pre-commit",
]
docs = [
  "ipython",
  "matplotlib",
  "sphinx",
  "sphinx-argparse",
  "sphinx-book-theme",
  "sphinxcontrib-programoutput",
]
test = [
  "pytest",
  "pytest-mock",
  "pytest-xdist",
]

[project.urls]
Homepage = "https://github.com/woom/woom"
Documentation = "https://woom.readthedocs.io"
Repository = "https://github.com/woom/woom"
"Bug Tracker" = "https://github.com/woom/woom/issues"

[project.scripts]
woom = "woom.cli:main"

[build-system]
requires = ["setuptools >= 64", "wheel", "setuptools-scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["woom"]
include-package-data = true

[tool.setuptools.package-data]
woom = ["*.ini", "*.cfg", "templates/*"]

[tool.setuptools_scm]
write_to = "woom/_version.py"

[tool.black]
line-length = 110
target-version = ['py39', 'py310', 'py311', 'py312']
skip-string-normalization = true

[tool.isort]
profile = "black"
line_length = 110
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/__pycache__/*"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "-ra",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "requires_scheduler: Tests requiring real scheduler",
]
log_cli = false
log_cli_level = "INFO"

[tool.pylint.main]
jobs = 0
py-version = "3.9"
suggestion-mode = true
fail-under = 8.0
ignore = ["migrations", "tests"]

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0212",  # protected-access
    "E203", # whitespace before ':' << due to black
]

[tool.pylint.format]
max-line-length = 110

[tool.pylint.design]
max-args = 10
max-attributes = 15
max-locals = 20

# Bandit configuration
[tool.bandit]
exclude_dirs = ["/tests", "/build", "/dist"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Code quality checks
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pylint

      - name: Check code formatting with black
        run: black --check woom tests

      - name: Check import sorting with isort
        run: isort --check-only woom tests

      - name: Lint with flake8
        run: |
          flake8 woom tests --ignore=C0111,C0103,R0903,R0913,W0212,E203 --max-line-length=110 --exclude=__pycache__
        continue-on-error: true

      - name: Lint with pylint
        run: pylint woom --fail-under=8.0
        continue-on-error: true


  # Security checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Perform Bandit Analysis
        uses: PyCQA/bandit-action@v1
        continue-on-error: true

  # Test matrix across Python versions
  test:
    name: Test (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run tests with pytest
        run: |
          pytest -v --junitxml=junit.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            junit.xml

  # Build package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Documentation build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[docs]

      - name: Build documentation
        run: |
          cd docs
          make html
        continue-on-error: true

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/

  # All checks passed
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, security, test, build, docs]
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "Some checks failed"
            exit 1
          fi
          echo "All checks passed!"

      - name: Summary
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Linting: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Documentation: ${{ needs.docs.result }}" >> $GITHUB_STEP_SUMMARY

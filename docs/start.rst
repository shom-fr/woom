.. _quick:
    
Start guide
###########

The concept
===========

Woom helps you performing tasks in isolated environments, in a given order, optionally cycling over dates 
and ensemble members, on your laptop or on an HPC with a scheduler.

Here are a few definitions.

A **task** consists of:

    * a job script that is generated by the workflow
    * submission arguments for submitting to a scheduler if any
    * a list of dependency jobs whose execution success conditions the launch of the current job.

A **job script** is a bash file that contains:

    * a line to :command:`trap` termination signals
    * a block that declares the environment
    * a line to change of directory
    * a block of commands that does the main job
    * an :command:`exit` command that emits any trapped signal or 0.

    .. seealso:: :ref:`templates`

To setup your workflow:

#. Create a directory that is dedicated to your workflow.
#. Configure your tasks in the :file:`tasks.cfg` file and especially its execution content and submission specifications.
#. Define the needed environments, directory and scheduler specifications in the :file:`host.cfg` file.
#. Configure your workflow in the :file:`workflow.cfg` file, in particular the parameters for generating the job script, 
   the cycling and ensemble specifications and in which order tasks are submitted through the stages.
#. Add supplementary materials like the :file:`bin` and :file:`lib` directories, 
   an extension :file:`ext` directory, or other useful files that you can access at runtime with the 
   ``workflow_dir`` substitution parameter or the :envvar:`WOOM_WORKFLOW_DIR` environment variable.

A typical sructure of the workflow directory is the following:

.. code-block:: bash

    workflow/
    ├── workflow.cfg  # mandatory
    ├── tasks.cfg     # mandatory
    ├── hosts.cfg     # mandatory
    ├── ext/          # optional, woom extensions
    │   ├── jinja_filters.py
    │   └── validator_functions.py
    ├── bin/          # opttional, prepended to $PATH in the job script
    │   └── myscript.py
    └── lib/
        └── python   # opttional, prepended to $PYTHONPATH in the job script
            └── mylib.py

You can add more stuff to this directory and access it using the ``{{ workflow_dir }}`` template
in configuration files or the :envvar:`WOOM_WORKFLOW_DIR` environment variable.

Configurations
==============

Tasks with :file:`tasks.cfg`
----------------------------

Four tasks with arbitraty names are specified in the file.
The command lines use jinja patterns like ``{{ data_dir }}`` that are filled both with entries
from the ``[params]`` section of the :file:`workflow.cfg` file and those provided by default by the workflow 
(:ref:`inputs_dict`).
Some of the tasks here are using a ``prepost`` environment that must be declared in the 
:file:`hosts.cfg` configuration file.

.. literalinclude:: samples/tasks.cfg
    :language: ini
    :caption: Example of :file:`tasks.cfg`

See also the :mod:`configobj` :ref:`specifications <cfgspecs.tasks>` for this configuration.

Hosts with :file:`hosts.cfg`
----------------------------

This example file declares the ressources that are available on the datarmor host, with in particular
its scheduler, the scratch dir taken from the :envvar:`SCRATCH` environment variable and the name of the
``seq`` queue.
A environment called ``prepost`` is declared as using environment modules and environment variables.

.. literalinclude:: samples/hosts.cfg
    :language: ini
    :caption: Example of :file:`hosts.cfg`

See also the :mod:`configobj` :ref:`specifications <cfgspecs.host>` for this configuration.

    
Workflow with :file:`workflow.cfg`
----------------------------------

In this example, we give a name too our app, specify which dates to loop over and declare parameters
``box`` and ``data_dir`` which can be used in the :file:`tasks.cfg` file.
The ``clean_data_dir`` task is executed only once and before looping over dates since it called in the ``[prolog]`` stage.
Other tasks are executed for each date interval in a sequential order, except ``fetch_data`` and 
``cp_config`` which are executed in parallel since they are called in the same sequence named ``fetch``.


.. literalinclude:: samples/workflow.cfg
    :language: ini
    :caption: Example of :file:`workflow.cfg`

See also the :mod:`configobj` :ref:`specifications <cfgspecs.workflow>` for this configuration.

Job script generation
=====================

The path to the job script is :file:`{{submission_dir}}/job.sh`.
The script is first exported  as string by :meth:`~woom.task.Task.export_content` that contains
Jinja patterns. See :ref:`start_jinja`. 
These patterns are then rendered by :func:`~woom.render.render` using a dictionary 
created by the :meth:`~woom.workflow.Workflow.get_task_inputs` workflow method.
See ":ref:`inputs_dict` to see its default content.
This dictionary is specific to a given task, at a given cycle and for a given ensemble member.

Trapped exit signals
--------------------

Trapping the signal allow the job to return an exit status that is different from zero in case of error.
The exit status is stored in :file:`{{submission_dir}}/job.status` and is interpreted by
the wokflow to know the job status.

Environment
-----------

The environment we need is specified by its name in the task configuration and is detailed in the host configuration.
It typically takes the form of environment module directives and environment variable declarations.

Run directory
-------------

It is specified in the task configuration and defaults to :file:`{{scratch_dir}}/{{task_path}}`.
One can use the ``scratch_dir`` and ``work_dir`` host configuration options or any 
:ref:`other input parameters <inputs_dict>`.

Command lines
-------------

The bash lines are at the heart what does the task.
They are configured in the task configuration and are rendered as bash line
thanks to the powerfull Jinja templating system (see: :ref:`start_jinja`).

Exit
----
Any exit signal that occured is saved into :file:`{{submission_dir}}/job.status`.
This signal is then emitted by the :command:`exit` command.

Finally
-------
The standard output is saved into :file:`{{submission_dir}}/job.out` and 
the standard error into :file:`{{submission_dir}}/job.err`.


.. _start_jinja:

Jinja rendering
===============

Jinja is a package that allows advanced template rendering.
See its `website <https://jinja.palletsprojects.com/en/stable/>`_ for detailed explanations.


Controling and running the workflow
===================================

Run all woom commands from the workflow directory.
See the :ref:`examples` section for more illustrative examples.

.. tip:: All woom commands support the ``--help`` option

.. highlight:: bash

First, make sure that the your workflow is well interpreted::

    $ woom show overview

Then, run your workflow in dry (fake) and debug mode::

    $ woom --logger-level debug run --dry-run

Then, run it in normal mode if everything is ok::

    $ woom run
    
To check the status of all jobs, especially on an HPC with a scheduler::

    $ woom show tatus

To kill jobs::

    $ woom kill      # all jobs
    $ woom kill 1264 # one job
    $ woom kill --task fetch_data # identified by task name

.. seealso:: :ref:`woom_main`, :ref:`woom_show`, :ref:`woom_run` and :ref:`woom_kill`
.. _quick:
    
Quick start guide
#################

The concept
===========

Woom helps you performing tasks in a given order, optionally cycling over dates and ensemble members.

Here are a few definitions.

.. topic :: A task consists of:

    * a job script that is generated by the workflow
    * submission arguments for submitting to a scheduler if any
    * a list of dependency jobs whose execution success conditions the launch of the current job.

.. topic :: A job script is a bash file that contains:

    * a line to :command:`trap` termination signals
    * a block that declares the environment
    * a line to change of directory
    * a block of commands that does the main job
    * an :command:`exit` command that emits any trapped signal or 0.

To setup your workflow:

#. Create a directory that is dedicated to your workflow.
#. Configure your tasks in the :file:`tasks.cfg` file and especially its content and submission specifications.
#. Define the needed environments, directory and scheduler specifications in the :file:`host.cfg` file.
#. Configure your workflow in the :file:`workflow.cfg` file, in particular the parameters for generating the job script, 
   the cycling and ensemble specifications and in which order tasks are submitted through the stages.

Configurations
==============

Tasks with :file:`tasks.cfg`
----------------------------

See also the :mod:`configobj` :ref:`specifications <cfgspecs.tasks>` for this configuration.

Hosts with :file:`hosts.cfg`
----------------------------

.. literalinclude:: samples/hosts.cfg
    :language: ini
    :caption: Example of :file:`hosts.cfg`

See also the :mod:`configobj` :ref:`specifications <cfgspecs.host>` for this configuration.

    
Workflow with :file:`workflow.cfg`
----------------------------------

See also the :mod:`configobj` :ref:`specifications <cfgspecs.workflow>` for this configuration.

Job script generation
=====================

The path to the job script is :file:`{{submission_dir}}/job.sh`.
The script is first exported  as string by :meth:`~woom.task.Task.export_content` that contains
Jinja patterns. See :ref:`start_jinja`. 
These patterns are then rendered by :func:`~woom.render.render` using a dictionary 
created by the :meth:`~woom.workflow.Workflow.get_task_inputs` workflow method.
See ":ref:`inputs_dict` to see its default content.
This dictionary is specific to a given task, at a given cycle and for a given ensemble member.

Trapped exit signals
--------------------

Trapping the signal allow the job to return an exit status that is different from zero in case of error.
The exit status is stored in :file:`{{submission_dir}}/job.status` and is interpreted by
the wokflow to know the job status.

Environment
-----------

The environment is specified by its name in the task configuration and the detailed in the host configuration.
It typically takes the form of environment module directives and environment variable declarations.

Run directory
-------------

It is specified in the task configuration and defaults to :file:`{{scratch_dir}}/{{task_path}}`.
One can use the ``scratch_dir`` and ``work_dir`` host configuration options or any 
:ref:`other input parameters <inputs_dict>`.

Command lines
-------------

The bash lines are at the heart what does the task.
They are configured in the task configuration and are rendered as bash line
thanks to the powerfull Jinja templating system (see: :ref:`start_jinja`).

Exit
----
Any exit signal that occured is saved into :file:`{{submission_dir}}/job.status`.
This signal is then emitted by the :command:`exit` command.

Finally
-------
The standard output is save into :file:`{{submission_dir}}/job.out` and 
the standard error into :file:`{{submission_dir}}/job.err`.


.. _start_jinja:

Jinja rendering
===============

Jinja is package that allows advanced template rendering.
See its `website <https://jinja.palletsprojects.com/en/stable/>`_ for detailed explanations.


Controling and running the workflow
===================================
